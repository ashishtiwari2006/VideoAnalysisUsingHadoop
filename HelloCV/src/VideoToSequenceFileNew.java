/* Written By Ashish Tiwari
 *   Contact: ashishtiwari2006@gmail.com
 */

import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.EnumSet;
import javax.imageio.ImageIO;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.videoio.VideoCapture;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.CreateFlag;
import org.apache.hadoop.fs.FileContext;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.BytesWritable;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.SequenceFile.CompressionType;
import org.apache.hadoop.io.SequenceFile.Metadata;
import org.apache.hadoop.io.Text;

public class VideoToSequenceFileNew {

	public static BufferedImage Mat2BufferedImage(Mat m) {
		int type = BufferedImage.TYPE_BYTE_GRAY;
		if (m.channels() > 1) {
			type = BufferedImage.TYPE_3BYTE_BGR;
		}
		int bufferSize = m.channels() * m.cols() * m.rows();
		byte[] b = new byte[bufferSize];
		m.get(0, 0, b); // get all the pixels
		BufferedImage image = new BufferedImage(m.cols(), m.rows(), type);
		final byte[] targetPixels = ((DataBufferByte) image.getRaster()
				.getDataBuffer()).getData();
		System.arraycopy(b, 0, targetPixels, 0, b.length);
		return image;

	}

	public static void main(String[] args) {

		System.out.println("Welcome to OpenCV " + Core.VERSION);
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);

		Configuration conf = new Configuration();

		// String folderPath = args[0];

		String folderPath = "input";  //put here path of folder that contain videos

		// String newSequenceFilePath = args[1];

		String sequenceFileForVideo = "CNNSequenceFile";  // this is output sequence file  name generated by this progaram that we can use in hadoop further

		File videoFolder = new File(folderPath);
		String metaDataTextFile = "input/CNN1.txt"; //put here path of meta data file that contain video frames and scene mapping, this file can be genrate using opencv 

		File metaDataFile = new File(metaDataTextFile);

		SequenceFile.Writer sceneWriter = null;

		try {

			sceneWriter = SequenceFile.createWriter(FileContext
					.getFileContext(conf), conf,
					new Path(sequenceFileForVideo), Text.class,
					BytesWritable.class, CompressionType.NONE, null,
					new Metadata(), EnumSet.of(CreateFlag.CREATE,
							CreateFlag.APPEND));

		} catch (IOException e) {
			e.printStackTrace();
		}

		String video_filename = "";
		VideoCapture video = new VideoCapture();
		boolean result = false;
		Mat frame = new Mat();
		boolean hasNext = true;
		int numOfFrames = 0;
		BufferedImage img = null;

		String imgIndex = "";

		int scnIndex = 0;

		if (!videoFolder.exists()) {
			System.out.println("Folder path:" + videoFolder.getAbsolutePath()
					+ "  does not exist");
		} else {
			File[] listofFiles = videoFolder.listFiles();

			System.out.println("no of video inside folder is :"
					+ listofFiles.length);

			for (int i = 0; i < listofFiles.length; i++) {

				ByteArrayOutputStream baos = new ByteArrayOutputStream();
				BufferedReader br = null;

				if (listofFiles[i].isFile()) {
					video_filename = listofFiles[i].getAbsolutePath();
					result = video.open(video_filename);

					if (result) {

						try {
							br = new BufferedReader(
									new FileReader(metaDataFile));
							String line;
							while ((line = br.readLine()) != null) {

								String[] lineData = line.split(" ");

								/*
								 * System.out .println(
								 * "----------------------------------------------------------------"
								 * ); System.out.println("Scene no " + scnIndex
								 * + " started"); System.out .println(
								 * "----------------------------------------------------------------"
								 * );
								 */
								int startIndex = new Integer(lineData[0]);
								int endIndex = new Integer(lineData[1]);

								int isComm = new Integer(lineData[2]);

								/*
								 * System.out.println("startIndex : " +
								 * startIndex + " endIndex : " + endIndex);
								 */

								for (int j = startIndex; j < endIndex
										&& hasNext; j++) {

									hasNext = video.read(frame);

									numOfFrames++;
									img = Mat2BufferedImage(frame);
									imgIndex = "" + j;
									ImageIO.write(img, "jpg", baos);
									sceneWriter.append(new Text(imgIndex + "_"
											+ scnIndex + "_" + isComm + "_"
											+ baos.size()), new BytesWritable(
											baos.toByteArray()));
									baos.reset();

								}

								/*
								 * System.out
								 * .println("no of images written now in Scene no:"
								 * + scnIndex + " is " + numOfFrames);
								 */
								scnIndex++;
							}

							System.out.println("no of images " + numOfFrames
									+ " and no of scene " + scnIndex
									+ " written into sequence file");
						} catch (FileNotFoundException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						} finally {
							try {
								baos.close();
								sceneWriter.close();
								br.close();
							} catch (IOException e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							}
						}

					} else {
						System.out.println("not able to open video: "
								+ listofFiles[i].getName());
					}

				}

			}
		}

	}

}
